//产生超时故障，用于系统测试
void timeoutFault()
{
Sleep(1000);
}

//产生崩溃故障，用于系统测试
void crashFault()
{
exit(0);
}

//随机生成故障，用于系统测试
void randGenFault()
{
staticboolinitFlag=false;
if(!initFlag)
{
srand((int)time(NULL));
initFlag=true;
}
switch(random(3)){
case0:
timeoutFault();
case1:
crashFault();
}
}

//角度坐标系转换
inlinedoubleangleConver(doubleangle)
{
return -90-angle;
}

//抽取向量点乘
inlinedoublevecMul(doublex0,doubley0,doublex1,doubley1)
{
return x0*x1+y0*y1;
}

//抽取向量取模
inlinedoublevecMod(doublex,doubley)
{
returnsqrt(x*x+y*y);
}

/*瞄准某个球
*参数：data：游戏数据，ball_x、ball_y：球当前位置，ball_v_x、ball_v_y：球当前速度，leftward、rightward：返回动作,左转或右转
*返回值：0：瞄准成功，-1：瞄准失败，1：无需转向
*/
intAimBall(DataStruct*data,BallStruct&ball,int&leftward,int&rightward)
{
floatball_x=ball.x,ball_y=ball.y,ball_v_x=ball.v_x,ball_v_y=ball.v_y;
//瞄准的角度
doubleangleTo,angleDiff;
//球运动方向和飞机与球位置向量的夹角余弦
doublecosPosV;
//两向量点乘除以两向量的模
cosPosV=vecMul(ball_v_x,ball_v_y,data->plane1.x-ball_x,data->plane1.y-ball_y)
/vecMod(ball_v_x,ball_v_y)/vecMod(data->plane1.x-ball_x,data->plane1.y-ball_y);
//根据正弦定理（a/sinA=b/sinB）求出sin值再求得所需度数
angleTo=angleConver(
(asin(sqrt(1-cosPosV*cosPosV)*vecMod(ball_v_x,ball_v_y)/2000)
+atan2(ball_y-data->plane1.y,ball_x-data->plane1.x))*180/PI);

//计算飞机朝向与该角度之差
angleDiff=fmod(fmod(data->plane1.angle-angleTo,360)+360,360);

//根据角度差选择更优旋转方向,角度很小则不转弯，3.6-180则右转，180-356.4左转
if(angleDiff<3.6||angleDiff>356.4)
{
return1;
}
elseif(angleDiff<180)
{
leftward=false;
rightward=true;
}
else
{
leftward=true;
rightward=false;
}

return0;
}
/*预测飞机位置
*参数：data：游戏数据，x、y：返回位置，time：给定时间
*返回值：0：预测成功，-1：预测失败
*/
intprePlanePos(DataStruct*data,inttime,float&x,float&y)
{
doublev_x0,v_y0,v_x1,v_y1,a_x,a_y;
//获取初速度
v_x0=data->plane1.v_x;
v_y0=data->plane1.v_y;
//无速度则无需预测
if(v_x0==0&&v_y0==0)
{
x=data->plane1.x;
y=data->plane1.y;
return0;
}
//计算加速度
a_x=-v_x0/vecMod(v_x0,v_y0)*4000;
a_y=-v_y0/vecMod(v_x0,v_y0)*4000;
//计算末速度
v_x1=v_x0+a_x*time/100;
//SIGN(x)((x<0)?1:0)
//判断速度是否反向，反向则置末速度为0
if(SIGN(v_x1)!=SIGN(v_x0))
{
v_x1=0;
}
v_y1=v_y0+a_y*time/100;
if(SIGN(v_y1)!=SIGN(v_y0))
{
v_y1=0;
}
//计算位置
x=data->plane1.x+(v_x1*v_x1-v_x0*v_x0)/2/a_x;
y=data->plane1.y+(v_y1*v_y1-v_y0*v_y0)/2/a_y;
return0;
}

/*转向某点
*参数：data：游戏数据，x、y：目标点，leftward、rightward：返回动作
*返回值：0：正在转向，1：完成转向，-1：转向失败
*/
intturnTo(DataStruct*data,floatx,floaty,int&leftward,int&rightward)
{
//飞机到目的地的角度
doubleangleTo,angleDiff;

//计算飞机到目的地的角度并改变坐标系
angleTo=angleConver(atan2(y-data->plane1.y,x-data->plane1.x)*180/PI);
//计算飞机朝向与该角度之差
angleDiff=fmod(fmod(data->plane1.angle-angleTo,360)+360,360);

//根据角度差选择更优旋转方向，角度很小则不转弯，3.6-180则右转，180-356.4左转

if(angleDiff<3.6||angleDiff>356.4)
{
return1;
}
elseif(angleDiff<180)
{
leftward=false;
rightward=true;
}
else
{
leftward=true;
rightward=false;
}

return0;
}

/*移动至某点
*参数：data：游戏数据，x、y：目标点，forward、leftward、rightward：返回动作，precision:精度，每次移动一精度
*返回值：0：正在移动，1：完成移动，-1：移动失败
*/
intmoveTo(DataStruct*data,floatx,floaty,int&forward,int&leftward,int&rightward,intprecision=1)
{
//计算当前点到终点距离
doubledis=vecMod(y-data->plane1.y,x-data->plane1.x);
//已到达目标点则终止动作
if(dis<precision)
{
return1;
}

//预测飞机位置
floatpre_x,pre_y;
prePlanePos(data,3000,pre_x,pre_y);

//正在转向则不加速
if(!turnTo(data,data->plane1.x+x-pre_x,data->plane1.y+y-pre_y,leftward,rightward))
{
forward=false;
return0;
}

dis=vecMod(y-pre_x,x-pre_y);
//停下时未到达目标点
if(dis>=precision)
{
forward=true;
leftward=false;
rightward=false;
}

return0;
}

/*判断是否需要移动
*参数：data：游戏数据、des_x：目标点横坐标、des_y：目标点纵坐标
*返回值：0：无需移动，1：需要移动
*/
intmoveNeeded(DataStruct*data,int&des_x,int&des_y,intpreTime=200)
{
floatmin_t=INT_MAX;
//预测每一个球的移动
for(inti=0;i<data->ball_size;i++)
{
//获取当前球的引用
BallStruct&ball=data->ball[i];
//获取当前球的坐标和速度
floatball_x=ball.x,ball_y=ball.y,ball_v_x=ball.v_x,ball_v_y=ball.v_y;
//计算球运动直线方程
floatA,B,C;
A=-1;
B=ball_v_y/ball_v_x;
C=ball_y-ball_x*ball_v_y/ball_v_x;
//计算飞机到直线距离
floatdis=fabs((A*data->plane1.y+B*data->plane1.x+C)/vecMod(A,B));
//计算垂点坐标
floatcross_x=(data->plane1.y-ball_y+ball_v_y/ball_v_x*ball_x+ball_v_x/ball_v_y*data->plane1.x)
/(ball_v_x/ball_v_y+ball_v_y/ball_v_x);
floatcross_y=(ball_v_y/ball_v_x)*(cross_x-ball_x)+ball_y;
//计算到垂点的时间
floatt=(cross_x-ball_x)/ball_v_x*100;
//反向运动或时间过久则忽略该球
if(t<0||t>preTime)
{
continue;
}
//判断该球是否有威胁
if(dis<data->plane1.r+ball.r+10&&t<min_t)
{
//设置最紧迫威胁
min_t=t;
//向相反方向移动球半径的距离
des_x=data->plane1.x+ball.r*(data->plane1.x-cross_x)
/vecMod(data->plane1.x-cross_x,data->plane1.y-cross_y);
des_y=data->plane1.y+ball.r*(data->plane1.y-cross_y)
/vecMod(data->plane1.x-cross_x,data->plane1.y-cross_y);
//如果x越界
if(des_x<data->plane1.r||des_x>2000-data->plane1.r)
{
des_x=data->plane1.x;
if(data->plane1.y-cross_y>0)
des_y=cross_y+ball.r+data->plane1.r;
else
des_y=cross_y-ball.r-data->plane1.r;
}
//如果y越界
if(des_y<data->plane1.r||des_y>1500-data->plane1.r)
{
des_y=data->plane1.y;
if(data->plane1.x-cross_x>0)
des_x=cross_x+ball.r+data->plane1.r;
else
des_x=cross_x-ball.r-data->plane1.r;
}
}
}

if(min_t!=INT_MAX)
{
return1;
}

//给定时间内无危险
return0;
}

//ai接口函数示例。data:游戏数据，key:飞机动作
//该函数按一个简单的规则瞄准目标和躲避球的威胁
void ai_pve(DataStruct*data,KeyStruct*key){
//默认不移动且恒发射子弹
key->forward=false;
key->rotate_left=false;
key->rotate_right=false;
key->shoot=true;

//创建静态移动标志
staticintmoveFlag=1,des_x,des_y;

//标志为0则正在移动或检查发现需要移动
if(moveNeeded(data,des_x,des_y)||moveFlag==0)
{
//进行移动并返回移动结果
moveFlag=moveTo(data,des_x,des_y,key->forward,key->rotate_left,key->rotate_right);
//返回标志为-1则发生错误
if(moveFlag==-1)
{
std::cout<<"移动发生错误"<<std::endl;
}
//结束函数执行
return;
}

//如果球个数不为零
if(data->ball_size)
{
//瞄准零号球
AimBall(data,data->ball[0],key->rotate_left,key->rotate_right);
}
}
